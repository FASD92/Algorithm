"""
상태 정의 : dp[i] = i번째 피보나치 수
점화식 : 
초기값 : dp[0] = 0, dp[1] = 1
최종값 : dp[n]

구현방식 : 타뷸레이션
왜? 계산 순서가 0,1,2,3,...,n으로 점진적이고 직선적임 -> 중복 계산이 없음
이전 값 두 개(dp[n-1],dp[n-2])만 저장하면 되므로 공간도 O(1)까지 최적화 가능
호출 스택 없어서 안정적이고 빠름
"""
n = int(input())

dp = [0] * (n+1)
dp[0] = 0
dp[1] = 1
for i in range(2, n+1):
    dp[i] = dp[i-1] + dp[i-2]

print(dp[n])